package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"graphql/graph/model"
)

// SignUp is the resolver for the SignUp field.
func (r *mutationResolver) SignUp(ctx context.Context, input model.NewUser) (*model.User, error) {
	return r.S.SignUp(input)
}

// CreateCompany is the resolver for the CreateCompany field.
func (r *mutationResolver) CreateCompany(ctx context.Context, input model.NewCompany) (*model.Company, error) {
	return r.S.CreateCompany(input)
}

// CreateJob is the resolver for the CreateJob field.
func (r *mutationResolver) CreateJob(ctx context.Context, input model.NewJob) (*model.Job, error) {
	return r.S.CreateJob(input)
}

// ViewCompanyByID is the resolver for the ViewCompanyById field.
func (r *queryResolver) ViewCompanyByID(ctx context.Context, cid string) (*model.Company, error) {
	return r.S.ViewCompanyByID(cid)
}

// ViewJobByID is the resolver for the ViewJobById field.
func (r *queryResolver) ViewJobByID(ctx context.Context, jid string) (*model.Job, error) {
	return r.S.ViewJobByID(jid)
}

// ViewAllJob is the resolver for the ViewAllJob field.
func (r *queryResolver) ViewAllJob(ctx context.Context) ([]*model.Job, error) {
	return r.S.ViewAllJob()
}

// ViewAllCompany is the resolver for the ViewAllCompany field.
func (r *queryResolver) ViewAllCompany(ctx context.Context) ([]*model.Company, error) {
	return r.S.ViewAllCompany()
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
